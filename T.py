from KegLib import *
from Stackd import Stack
stack = Stack()
printed = False
_register = None
character(stack, 'c')
register(stack)
character(stack, 'd')

for _ in loop_eval(stack.pop()):
    register(stack)
    duplicate(stack)
    raw(stack)
    register(stack)
    character(stack, ' ')
    character(stack, 'b')
    character(stack, 'o')
    character(stack, 't')
    character(stack, 't')
    character(stack, 'l')
    character(stack, 'e')
    character(stack, 's')
    character(stack, ' ')
    character(stack, 'o')
    character(stack, 'f')
    character(stack, ' ')
    character(stack, 'b')
    character(stack, 'e')
    character(stack, 'e')
    character(stack, 'r')
    character(stack, ' ')
    character(stack, 'o')
    character(stack, 'n')
    character(stack, ' ')
    character(stack, 't')
    character(stack, 'h')
    character(stack, 'e')
    character(stack, ' ')
    character(stack, 'w')
    character(stack, 'a')
    character(stack, 'l')
    character(stack, 'l')
    integer(stack, 44)
    character(stack, ' ')
    reverse(stack)
    length(stack)
    
    for _ in loop_eval(stack.pop()):
        nice(stack)
    
    register(stack)
    duplicate(stack)
    raw(stack)
    register(stack)
    character(stack, ' ')
    character(stack, 'b')
    character(stack, 'o')
    character(stack, 't')
    character(stack, 't')
    character(stack, 'l')
    character(stack, 'e')
    character(stack, 's')
    character(stack, ' ')
    character(stack, 'o')
    character(stack, 'f')
    character(stack, ' ')
    character(stack, 'b')
    character(stack, 'e')
    character(stack, 'e')
    character(stack, 'r')
    integer(stack, 46)
    integer(stack, 9)
    integer(stack, 1)
    maths(stack, '+')
    reverse(stack)
    length(stack)
    
    for _ in loop_eval(stack.pop()):
        nice(stack)
    
    character(stack, 'T')
    character(stack, 'a')
    character(stack, 'k')
    character(stack, 'e')
    character(stack, ' ')
    character(stack, 'o')
    character(stack, 'n')
    character(stack, 'e')
    character(stack, ' ')
    character(stack, 'd')
    character(stack, 'o')
    character(stack, 'w')
    character(stack, 'n')
    integer(stack, 44)
    character(stack, ' ')
    character(stack, 'p')
    character(stack, 'a')
    character(stack, 's')
    character(stack, 's')
    character(stack, ' ')
    character(stack, 'i')
    character(stack, 't')
    character(stack, ' ')
    character(stack, 'a')
    character(stack, 'r')
    character(stack, 'o')
    character(stack, 'u')
    character(stack, 'n')
    character(stack, 'd')
    integer(stack, 44)
    character(stack, ' ')
    reverse(stack)
    length(stack)
    
    for _ in loop_eval(stack.pop()):
        nice(stack)
    
    register(stack)
    integer(stack, 1)
    maths(stack, '-')
    register(stack)
    register(stack)
    duplicate(stack)
    raw(stack)
    register(stack)
    character(stack, ' ')
    character(stack, 'b')
    character(stack, 'o')
    character(stack, 't')
    character(stack, 't')
    character(stack, 'l')
    character(stack, 'e')
    character(stack, 's')
    character(stack, ' ')
    character(stack, 'o')
    character(stack, 'f')
    character(stack, ' ')
    character(stack, 'b')
    character(stack, 'e')
    character(stack, 'e')
    character(stack, 'r')
    character(stack, ' ')
    character(stack, 'o')
    character(stack, 'n')
    character(stack, ' ')
    character(stack, 't')
    character(stack, 'h')
    character(stack, 'e')
    character(stack, ' ')
    character(stack, 'w')
    character(stack, 'a')
    character(stack, 'l')
    character(stack, 'l')
    integer(stack, 46)
    integer(stack, 9)
    integer(stack, 1)
    maths(stack, '+')
    reverse(stack)
    length(stack)
    
    for _ in loop_eval(stack.pop()):
        nice(stack)



if not printed:
    printing = ""
    for item in stack:
        if type(item) in [str, Stack]:
            printing += item
        elif type(item) is Coherse.char:
            printing += item.v

        elif item < 10 or item > 256:
            printing += str(item)
        else:
            printing += chr(item)
    print(printing)
